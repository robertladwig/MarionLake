# author: Robert Ladwig
# date: 10/07/2020
# title: GLM Workshop
#### Workshop setup ####
cat("\f")
rm(list = ls())
# if you're using Rstudio:
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
#setwd('./example')
# overview of files for this workshop in the example folder
list.files()
# we will need these packages
library(glmtools)
library(GLM3r)
library(rLakeAnalyzer)
library(tidyverse)
library(lubridate)
library(ncdf4)
# check out which R version we're currently using
glm_version()
#### Example 1: reading the namelist file into R  ####
glm_template = 'glm3_rb_Bathy.nml'
sim_folder <- getwd()
setwd(sim_folder)
sim_folder
out_file <- file.path(sim_folder, "output","output.nc")
out_file
#field_data <- file.path(sim_folder,"bcs","tt.csv")
field_data <- file.path(sim_folder,"bcs","Dam_2020_Hr.csv")
field_data
file.copy(glm_template, 'glm3.nml', overwrite = TRUE)
nml_file <- file.path(sim_folder, 'glm3.nml')
nml_file <- paste0(sim_folder,"/glm3.nml") # This step sets the nml_file for your
#### Example 2: first visualisations ####
# run GLM
GLM3r::run_glm(sim_folder, verbose = T)
#### Example 2: first visualisations ####
# run GLM
GLM3r::run_glm(sim_folder, verbose = T)
temp_rmse <- compare_to_field(nc_file = out_file,
field_file = field_data,
metric = 'water.temperature',
as_value = FALSE,
precision= 'hours')
print(paste('Total time period (uncalibrated):',round(temp_rmse,2),'deg C RMSE'))
var = 'temp'         # variable to which we apply the calibration procedure
path = getwd()       # simulation path/folder
nml_file = nml_file  # path of the nml configuration file that you want to calibrate on
glm_file = nml_file # # path of the gml configuration file
# which parameter do you want to calibrate? a sensitivity analysis helps
calib_setup <- data.frame('pars' = as.character(c('wind_factor','Kw')),
'lb' = c(0.7,0.1),
'ub' = c(2,0.8),
'x0' = c(1,0.3))
print(calib_setup)
glmcmd = NULL        # command to be used, default applies the GLM3r function
# glmcmd = '/Users/robertladwig/Documents/AquaticEcoDynamics_gfort/GLM/glm'        # custom path to executable
# Optional variables
first.attempt = TRUE # if TRUE, deletes all local csv-files that stores the
#outcome of previous calibration runs
(period = get_calib_periods(nml_file, ratio = 7)) # define a period for the calibration,
# this supports a split-sample calibration (e.g. calibration and validation period)
# the ratio value is the ratio of calibration period to validation period, ratio 2 means two parts to calibrationand 1 part to calibration
print(period)
scaling = TRUE       # scaling of the variables in a space of [0,10]; TRUE for CMA-ES
verbose = TRUE
method = 'CMA-ES'    # optimization method, choose either `CMA-ES` or `Nelder-Mead`
metric = 'RMSE'      # objective function to be minimized, here the root-mean square error
target.fit = 0.1     # refers to a target fit of 2.0 degrees Celsius (stops when RMSE is below that)
target.iter = 100    # refers to a maximum run of 20 calibration iterations (stops after that many runs)
plotting = TRUE      # if TRUE, script will automatically save the contour plots
output = out_file    # path of the output file
field_file = field_data # path of the field data
conversion.factor = 1 # conversion factor for the output, e.g. 1 for water temp.
additional.var = var
calibrate_sim(var = 'temp', path = getwd(),
field_file = field_file,
nml_file = nml_file,
glm_file = glm_file,
calib_setup = calib_setup,
glmcmd = NULL, first.attempt = TRUE,
period = period,
scaling = TRUE, method = 'CMA-ES', metric = 'RMSE',
target.fit = 0.1, target.iter = 10,
plotting = TRUE,
output = output,
verbose = TRUE,
conversion.factor = 1,
additional.var = var)
?calibrate_sim
devtools::install_github('robertladwig/glmtools', ref = 'ggplot_overhaul')
calibrate_sim(var = 'temp', path = getwd(),
field_file = field_file,
nml_file = nml_file,
glm_file = glm_file,
calib_setup = calib_setup,
glmcmd = NULL, first.attempt = TRUE,
period = period,
scaling = TRUE, method = 'CMA-ES', metric = 'RMSE',
target.fit = 0.1, target.iter = 10,
plotting = TRUE,
output = output,
verbose = TRUE,
conversion.factor = 1,
additional.var = var)
?calibrate_sim
